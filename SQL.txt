SQL:

1) SQL Basics:

DATABASE=LIBRARY
SCHEMA=CATEGORY(logical container that contains similar tables)
TABLES=BOOKS

2) SQL Commands

DDL(data definition language)-> changes the structure of database. create, drop, alter
DQL(data query language)-> select
DML(data manipulation)-> manipulate the data. insert, delete, update
DCL(data control)-> grant, revoke (access to db)
TCL(transaction control)-> commit, rollback, savepoint

3) PREPARING THE ENVIRONMENT

   
a) select statement

   SELECT first_name,
	  country
   FROM customer;

  execution first from (FROM customer)->(select all columns)

b) DISTINCT, ORDER BY

1) select distinct country from customers;
2) select * from customers order by score ASC/DESC;
3) you can apply order by on multiple columns;


select * from customers order by country asc, score desc

first sorting by country, then same rows by country name are sorted by their scores in descending order.


c) FILTERING THE DATA

1) where clause

select * from customers where score > 500;

execution from->where->select

d) COMPARISON OPERATOR

 =
 != <> -> not equal
 <=
 >=

e) LOGICAL OPERATOR

   AND -> 
   OR ->
   NOT -> select * from customer where not score < 400;

   IN -> return true if value is in a set of values.
   
   select * from customers where customer_id in (1,2,3);
	
   BETWEEN -> return true if a value falls within the given range.
   
   select * from customers where score between 100 and 500;
   
   LIKE -> used to match patterns.
   
   _ -> underscore matches exactly one character
   % -> percent matches anything

   find names containing r at 3rd position: _ _ r %
   
   
f) SQL JOINS

   - You need a common join key present among tables.
   - Databases make use of 3 algorithms while performing joins Nested Loop Join(simple nested loops),
     Merge Join(merge sort algorithm is used on 2 sorted arrays) and Hash Join(hashmaps are used for efficient lookups).
   

LEFT TABLE                RIGHT TABLE                  JOIN

only matching rows        only matching rows           INNER

return all rows           only matching rows           LEFT

only matching rows        return all rows              RIGHT

return all rows           return all rows              FULL


g) SQL ALIASES

   select 
   c.customer_id as cid 
   from customers AS c


h) INNER JOIN

   SELECT c.customer_id,c.first_name,o.order_id,o.quantity FROM
   customer AS c INNER JOIN orders AS o ON c.customer_id
   = o.customer_id;

  working

  left = customer
  right = orders
  
  matrix multiplication occurs


i) LEFT JOIN

   SELECT c.customer_id,c.first_name,o.order_id,o.quantity FROM
   customer AS c LEFT JOIN orders AS o ON c.customer_id
   = o.customer_id;


k) avoid full joins it causes bad performance.


l) UNION (combining 2 tables meaning all rows from left
and all rows from right)+ to avoid duplicates


LR LR            RR RR

LR LR
RR RR

in query, both tables must have exactly same number of
columns and in the same order.

    
UNION ALL - if duplicates are also allowed


m) AGGREGATE FUNCTIONS:  


1) count - returns the number of rows in a result set
2) sum - return the sum of values
3) max - max among the rows
4) avg - avg of the row
5) min - min among the rows

   
*** COUNT ***

1) count(column name || *)

  count(*) will count all rows
  count(column name) will count all non null column name values


2) sum- applies on only number containing columns. null are treated as zero

3) avg same as sum

4) you can apply MIN and MAX on dates.


*** STRING FUNCTIONS ***

1) CONCAT
2) LOWER
3) UPPER
4) TRIM() (LTRIM+RTRIM)
5) LENGTH
6) SUBSTRING


 select LENGTH(TRIM(first_name)) from customers;
 
 I N D I A
 1 2 3 4 5
   S E
 SUBSTRING(column_name,2,3) o/p = ND



*** SQL Advanced ***

1) Group By clause

   count total number of person by country name
   
   select country,count(*) as total from customers group by country

   Working behind the scene:
   
   1) every column mentioned in the group by should be present in select, and
      rest column should be present inside an aggregate function 
   
   2) if in group by multiple columns are mentioned then the sql first determines
      unique combination of columns and then create that much rows and aggregate
      similar rows


2) Having clause


   1) 3:15:06


3) SUBQUERIES

   EXISTS AND IN

   *** IN ***

   select * from customers where customer_name in 
  (select customer_name from customers where score>100)

  
   *** EXISTS ***

   SELECT *
   FROM CUSTOMERS as c
   WHERE EXISTS (
   SELECT 1
   FROM orders as o
   WHERE c.customer_id=o.customer_id
   )

   1) outer query row is retrieved and then it is checked with the subquery 
      select 1 tells whether the row exists or not.




java
boot
dsa
sql
os
   

